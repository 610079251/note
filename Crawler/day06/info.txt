验证码生成：
		pip install captcha

日志：
		如果系统提供了一个写日志的策略，
尽量使用系统提供的；
级别：
	CRITICAL = 50
	FATAL = CRITICAL
	ERROR = 40
	WARNING = 30
	WARN = WARNING
	INFO = 20
	DEBUG = 10
	NOTSET = 0
注意：
	1）如果默认的日志级别设置成INFO,
那么低于INFO级别的日志将不会被写，
比如DEBUG信息不会被写；
	2）如果这个日志不再被使用了，需要
remove掉handler，否则它会常驻内存，
引起混乱；

面试题：
		 从m个不同元素中，任取n(n≤m)个
元素并成一组，叫做从
m个不同元素中取出n个元素的一个组合；
从m个不同元素中取出n(n≤m)个元素
的所有组合的个数，叫做从m个不同
元素中取出n个元素的组合数。
公式： C(m,n)=m!/((m-n)!*n!)（n≤m）
性质：C(m,n)= C(m,m-n)                  --可以推导出--》 
      C(m,0) = C(m,m) = 1
      C(m,n)=C(m-1,n-1)+C(m-1,n)
请使用递归的方法来计算组合数。

C(3,2) = 3!/(1!*2!) = 3*2*1 / 1*2*1 = 3
C(3,2) = C(3,3-2) = C(3,1)
A B C取2个：
	A B
	A C
	B C
Dynamical Programming:
		用空间换时间，保留中间结果；


作业）
	使用爬虫技术把：
	https://www.kuaidaili.com/free/inha/
	下面的代理服务器信息尽可能的抓取下来；
	IP地址，PROT, HTTP(HTTPS);


不需要账号的公用的Proxy：
		116.62.23.142:16816
私用的代理:
    username:password@IP地址:port

反反爬：
1）User-Agent池；
2）代理服务器池；
3）CookieJar等的管理；
4）协议的细节考虑，如：需要大量的实践经验总结的
          抓取数据时不处理CSS，JS等；
          nofollow属性；css的display属性；探测陷阱；
          验证refer locator等；
5）使用分布式的多机策略；
爬慢点，把爬虫放到访问频繁的主站IP子网下，
如教育网；
6）使用了各种规则来尝试批量爬取，然后对规则动态进行组合；
7）验证码的搞定：机器学习，图像识别；
8）尽可能遵守Robots协议；




