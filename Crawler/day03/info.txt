正则匹配一个数字或者字母:
	[0-9a-zA-Z]

在匹配网页时，需要使用这种小步快跑的方式，
精细的匹配所有的信息；

使用正则匹配：
	  1.http或者https开头的URL；
		2.匹配email电子邮件；
^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b
\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@
(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9]
(?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]
|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|
[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:
[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|
\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
		3.身份证信息；
https://www.jb51.net/article/109384.htm
		4.匹配QQ号；^\d{5,12}$
三十分钟正则表达式：
		https://www.jb51.net/tools/zhengze.html
正则表达式真正难的地方是：剔除你不想要的信息；


作业
	1)把 i=d%0A&from=AUTO&to=AUTO&smartresult=dict
使用正则表达式转换成下面的形式：
i:d%0A
from:AUTO
to:AUTO
smartresult:dict

万能的正则：
		[\s\S]*?



猫眼爬虫项目：
		http://maoyan.com/board/4?offset=0
		                                 10
																		 20
																		 。。。
																		 90


面试题：
		有1000个一模一样的瓶子，其中有999个装的是普通的水，
有1瓶装的是无色无味的液体毒药；
你有10只小白鼠和一周的时间；
这瓶毒药在小白鼠喝完之后的一周会发作死亡；
那么如何找出这瓶毒药？
	如何让这10只小白鼠和1000个瓶子之间
建立起某种映射关系；
   X Y
	 0 0
	 0 1
	 1 0 
	 1 1
1-1000:
0000000001              X10
0000000010              X9
0000000011              X9,X10
0000000100
...
1101110111      887     X1,X2,X4,X5,X6,X8,X9,X10
1101111001      889     X1,X2,X4,X5,X6,X7,X10
1111101000     1000     X1,X2,X3,X4,X5,X7

X1 X2 X3 X4 ... X10
Python中二进制转成十进制；

进程，线程，协程；
yield是实现协程的基础；
我们所说的Python实际上是指CPython；
GIL全局解释锁:
	Python之父在单核的年代下创立了GIL，出于数据的安全性
加了这把锁，在当时是很好的一件事；但是到了多核
的年代，GIL成为了一个瓶颈，Python应对的策略是
使用multiprocessing的多进程来解决；
什么情况下使用多进程，什么情况下使用多线程及协程？
		1)对于CPU密集型的场景，要求大量运算处理的场景，
图像处理，密码破解等等，提倡使用多进程；
		2)对于IO密集型的场景，典型的如网络爬虫，文件下载等
提倡使用多线程及协程；
如何突破GIL？
	1.可以使用C语言重新实现一次Python线程创建的过程；
  2.使用多进程；

    如果你的CPU单核，
有两个进程同时在死循环，CPU占用率是多少；几乎100%
有两个线程同时在死循环，CPU占用率是多少；几乎100%
    如果你的CPU双核，
有两个进程同时在死循环，CPU占用率是多少；两个几乎100%
有两个线程同时在死循环，CPU占用率是多少；两个几乎50%；

同步，异步：
	同步：某一时刻程序执行的序列是确定；  pool.apply
	异步：某一时刻程序执行的序列是不确定; pool.apply_async

进程池的使用：
		进程池中进程在进行交互时，不能直接使用multiprocessing
的类，而要用multiprocessing.Manager中的类；