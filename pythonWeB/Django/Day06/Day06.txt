1、模型
	1、修改数据
		1、修改单个数据
			1查2改3保存

			1、通过 get() 得到要修改的数据
			2、再通过实体对象的属性修改属性值
			3、最后通过实体对象的save()保存回数据库

			au = Author.objects.get(id__exact=1)
			au.name = '郭敬明'
			au.age = 30
			au.save()
		2、批量修改数据
			调用QuerySet的update()即可
			Author.objects.filter(id__gt=1).update(属性=值,属性=值)

	2、删除数据
		调用实体对象/查询结果集的delete()即可
		1、删除单个对象
			obj = Author.objects.get(id=1)
			obj.delete()
		2、删除多个对象(结果集)
			Author.objects.all().delete()
2、转发 & 重定向
	1、转发
		在一个视图中调用了另外一个视图，再将结果响应给浏览器
		特点：浏览器地址栏的地址始终是第一个请求的地址
	2、重定向
		1、什么是重定向
			重新向新的访问地址发送一个请求(由服务器端通知客户端)
		2、语法
			from django.http import HttpResponseRedirect

			return HttpResponseRedirect('重定向地址')
3、ORM操作
	1、F操作 和 Q操作
		1、F()
			更新Author表中数据，所有人的年龄+10岁
			update Author set age=age+10

			Author.objects.all().update(age=age+10) # 错误

			作用：用于在执行中获取某列的值
			语法：F('列名')

			from django.db.models import F
			Author.objects.all().update(age=F('age')+10)

		2、Q()
			Author.objects.filter(id=1,age__gte=50)
			select * from Author where id=1 and age>=50

			作用：在查询条件中，可以完成 或(or) 的操作
			语法：
				from django.db.models import Q
				Q(条件1)|Q(条件2)

				Author.objects.filter(Q(id=1)|Q(age__gte=50))
				select * from Author where id=1 or age >= 50
	2、原生的数据库操作方法
		1、查询
			函数：raw(sql语句)
			语法：Entry.objects.raw(sql语句)
			返回：QuerySet
		2、增删改
			def doSQL(request):
				with connection.cursor() as cursor:
					sql = 'delete from Author'
					cursor.execute(sql)
					return ... ...;
4、使用后台管理Models
	1、后台的配置
		登录地址：http://localhost:8000/admin

		创建后台管理员：
			./manage.py createsuperuser
			Username:输入用户名，默认为 tarena
			Email Address:电子邮件
			Password:密码
			Password(again):重复密码

	2、基本管理
		1、在应用中的 admin.py 中注册要管理的Models
			1、admin.py
				作用：注册需要管理的Models,只有在此注册了的Models才允许被后台管理
			2、注册Models
				from .models import *

				admin.site.register(Entry1)
				admin.site.register(Entry2)

		2、修改 models.py 处理显示的内容
			1、在 models.py 中的各个class追加
				def __str__(self):
					return self.xxx
			2、通过 Models 类的内部类 Meta 定义更多的展现形式
				class Author(models.Model):
					... ... ...
					... ... ...
					... ... ...

					class Meta:
						1、db_table
							指定该实体类对应到表的名字
							取值：字符串
							注意：需要同步数据库才能生效
						2、verbose_name
							定义该实体类在后台中的显示的名字(单数)
						3、verbose_name_plural
							效果同上(复数)
						4、ordering
							指定显示数据的排序规则
							取值：一个列表，指定排序属性，默认是升序，如果需要降序的话，属性名前加 - 
	3、高级管理
		1、在 admin.py 中创建高级管理类
			1、定义高级管理类 - EntryAdmin
				必须继承自 admin.ModelAdmin
				ex:
					class AuthorAdmin(admin.ModelAdmin):
						pass
			2、注册高级管理类
				admin.site.register(Entry,EntryAdmin)
				ex:
					admin.site.register(Author,AuthorAdmin)
		2、允许在 EntryAdmin 增加的属性(高级管理属性)
			1、list_display
				作用：指定在 列表页 中显示的字段们
				取值：由属性名成组成的列表或元组
				ex:
					list_display=('name','age','email')
			2、list_display_links
				作用：定义在列表页中也能够连接到详情页中的字段们
				取值：由属性名成组成的列表或元组
				注意：取值必须出现在 list_display 中
			3、list_editable
				作用：指定在列表页中就允许修改的字段们
				取值：由属性名成组成的列表或元组
				注意：取值不能出现在 list_display_link 中
			4、search_fields
				作用：指定在列表页中允许被搜索的字段们
				取值：由属性名成组成的列表或元组
			5、list_filter
				作用：在列表页的右侧增加一个过滤器，实现快速筛选
				取值：由属性名成组成的列表或元组
			6、date_hierarchy
				作用：在列表页的顶部增加一个时间选择器
				取值：必须是DateField 或 DateTimeFiled的列
			7、fields
				作用：在详情页面中，指定显示那些字段并按照什么样的顺序显示
				取值：由属性名成组成的列表或元组
			8、fieldsets
				作用：在详情页中，对字段们进行分组显示
				注意：fieldsets 和 field 是不能共存的
				语法：
					fieldsets = (
						# 分组1
						(
							'分组名称',{
								'fields':('属性1','属性2'),
							}
						),
						# 分组2
						()
					)







