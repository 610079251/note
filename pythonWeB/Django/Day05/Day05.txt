作业 - FruitDay
	1、用户实体 - Users
		1、电话号码 - uphone
		2、密码 - upwd
		3、电子邮件 - uemail
		4、用户名 - uname
		5、启用/禁用 - isActive(默认值为 True)

1、模型
	1、字段类型
		ImageField : 保存图片的路径
		用法：
			pic = models.ImageField(upload_to='static/upload')
	2、天天果园数据分析
		1、商品类型Models - GoodsType
			1、类型名称 - title
			2、类型图片 - picture
				默认上传路径：static/upload/goodstype
			3、类型描述 - desc
		2、商品Models - Goods
			1、商品名称 - title
			2、商品价格 - price (DecimalField)
			3、商品规格 - spec (CharField)
			4、商品图片 - picture
				默认上传路径：static/upload/goods
			5、销售状态 - isActive(默认值为True)
=================================================
1、模型
	1、数据的版本切换
		1、./manage.py migrate
			执行所有应用中最新版本的数据库中间文件
		2、./manage.py migrate 应用名称 版本号
			./manage.py migrate index 0002
			执行 index 应用中的 版本号为0002的中间文件
	2、通过数据库自动导出Models
		./manage.py inspectdb > 文件名.py
2、模型中的CRUD
	1、通过ORM向DB中增加数据
		1、Entry.objects.create(属性=值,属性=值,...)
			ex:
				Author.objects.create(name='zsf',age=85,email='zsf@163.com')
		2、创建一个Models对象，并通过 save() 完成增加
			obj = Entry(属性=值,属性=值)
			obj.save()
		3、使用字典构建对象，并调用其 save() 完成增加
			dic = {
				'属性1':'值1',
				'属性2':'值2',
				... ...
			}

			obj = Entry(**dic)
			obj.save()
		
		练习：
			使用三种方式，分别向 index_book,index_publisher 中，各增加三条数据
	2、查询操作(重难点)
		通过 Entry.objects 调用查询接口
		1、基本查询操作
			语法：all()
			用法：Entry.objects.all()
			返回：QuerySet (封装了若干对象的列表)

			ex:
				authors = Author.objects.all();
				等同于：select name,age,email from [index_author]

		2、查询指定列的操作
			语法：values('列1','列2')
			用法：Entry.objects.values('列1','列2')
			返回：QuerySet (封装了若干字典的列表)
			注意：values() 可以用在所有返回查询结果集的方法的后面的
				Entry.objects.all().values()
		3、指定排序效果
			语法：order_by('列1','列2',...)
				默认：升序排序
				降序：在列前加 -
			ex:
				Author.objects.order_by('age')
				Author.objects.all().order_by('age')

			注意：order_by()可以用在所有返回查询结果集的方法的后面

		4、对条件取反
			语法：exclude(条件)
			用法：Entry.objects.exclude(属性=值,属性=值)
			ex:
				1、Author.objects.exclude(id=3)
					select * from author where not (id=3)
				2、Author.objects.exclude(id=3,age=85)
					select * from author where not (id=3 and age=85)
		5、根据条件查询部分行数据(重难点)
			语法：filter(条件)
			用法：Entry.objects.filter(条件)
			1、直接使用 Entry 中的属性作为查询条件
				如果有多个查询条件，使用 , 隔开，映射到sql语句中，使用 and 进行关联的
				1、Author.objects.filter(id=1)
					select * from author where id=1
				2、Author.objects.filter(id=1,name='韩寒')
					select * from author where id=1 and name='韩寒'
			2、通过 Field Lookups 完成复杂条件查询
				Field Lookup ：查询表达式 (查询谓词)
					每一个查询谓词都是一个独立的查询条件，可以用在所有的 有查询条件的位置处
				1、__exact
					作用:等值判断
					用法:Entry.objects.filter(属性__exact=值)
					ex:
						Author.objects.filter(id__exact=1)
						Author.objects.filter(id=1)
				2、__contains
					作用：判断属性中是否包含指定关键字
					用法：Entry.objects.filter(属性__contains=值)
				3、__lt
					作用：判断属性值是否小于指定的值
					用法：Entry.objects.filter(属性__lt=值)
				4、__lte
					作用：判断属性值是否小于等于指定的值
				5、__gt
					作用：判断属性值是否大于指定的值
				6、__gte
					作用：判断属性值是否大于等于指定的值
				7、__startswith
					作用：判断属性值是以指定数值开头的数据
				8、__endswith
					作用：判断属性值是以指定数值结尾的数据
					... ...
		6、查询只返回一条记录
			语法：get()
			用法：Entry.objects.get(查询条件/谓词)
			注意：
				该函数只能用在查询返回一条记录时使用。如果返回多条数据 或 不返回数据时，都会报错

		7、查询结果集中记录数
			语法：count()
			用法：
				Entry.objects.count()
				Entry.objects.filter(条件).count()



all() :
	[
		<Author: Author object>, 
		<Author: Author object>, 
		<Author: Author object> ]
values() :
	[
		{'name': '朱自清', 'email': 'zhuzq@163.com'},
		{'name': '老舍', 'email': 'laoshe@163.com'},
		{'name': '韩寒', 'email': 'hanhan@163.com'} ]

order_by() :
	[
		<Author: Author object>, 
		<Author: Author object>, 
		<Author: Author object> ]

filter()
	[<Author: Author object>]