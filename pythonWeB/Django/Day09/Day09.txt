1、使用 forms 模块
	1、在视图中，通过 forms.Form 快速获取表单数据
		1、通过 forms.Form 的构造函数，接收post数据
			form = XXXForm(request.POST)
		2、需要让 form 通过验证后，再取值
			目的：防止数据错误提交
			form.is_valid()
			返回true:通过验证
			返回false:未通过验证，提交的数据与表单类型不匹配
		3、获取表单提交的数据
			通过 form.cleaned_data(字典) 获取提交的数据

			cd = form.cleaned_data
			value = cd['name']

		练习：
			1、在 forms.py 中追加一个 RegisterForm 类
			2、增加以下属性，并生成到rergister.html 显示成表单控件
				1、uname ：文本框
				2、upwd ：密码框
				3、uemail ：邮件框
				4、uage ：文本框
			3、在 register.html中增加 form 和 submit
			4、点击提交时，将以上数据插入到数据库中
				创建 数据库 - day7
				创建 models 类 - Users
	2、forms 的高级处理
		将 Models 和 Forms 结合到一起使用
		1、在 forms.py 中，创建 class，继承自 forms.ModelForm
		2、创建内部类 ：Meta
			作用：关联 Form 和 Models 的
			1、model : 指定要关联的Models类
				ex: model = Users
			2、fields : 指定从Models类中取出哪些字段生成控件
				1、取值 "__all__",全部属性都要生成表单控件
				2、指定一个列表，声明允许生成表单控件的属性名
					ex: fields = ["uname","upwd"]
			3、labels:指定每个属性要关联的label，取值为 字典
				ex:
					labels = {
						'属性名':'label文本',
						'属性名':'label文本',
					}

		练习：使用 Models 完成 登录操作
			创建一个登录的表单，控件从 Users 中获取
	3、内置小部件
		1、什么是小部件
			小部件(Widget),表示的是生成到页面中的控件的类型以及其他属性
		2、常用小部件
			1、TextInput : type="text"
			2、NumberInput : type="number"
			3、EmailInput : type="email"
			4、URLInput : type="url"
			5、PasswordInput : type="password"
			6、HiddenInput : type="hidden"
			7、CheckboxInput : type="checkbox"
			8、Textarea : <textarea></textarea>
			9、Select : <select></select>
		3、小部件的使用
			1、继承自 forms.Form
				1、基本版
					属性 = forms.CharField(
						label='xxx',
						widget=forms.小部件类型
					)
					ex:
						upwd = forms.CharField(
							label='用户密码',
							widget=forms.PasswordInput
						)

						age = forms.CharField(
							label='用户年纪',
							widget=forms.NumberInput
						)
				2、高级版
					属性 = forms.CharField(
						label='标签',
						widget=forms.小部件类型(
							attrs={
								'属性名1':'属性值1',
								'属性名2':'属性值2',
							}
						)
					)

					ex:
						upwd = forms.CharField(
							label='用户密码',
							widget=forms.PasswordInput(
								attrs={
									'placeholder':'请输入密码',
									'class':'form-control',
									'max-length':'26',
								}
							)
						)
			2、继承自 forms.ModelForm
				class WidForm2(forms.ModelForm):
					class Meta:
						model=Users
						fields="__all__"
						labels={
							'属性1':'标签1',
							'属性2':'标签2',
						}
						widgets={
							'属性1':forms.小部件类型(
								attrs={
									'属性':'值',
								}
							)
						}
2、cookies
	1、什么是cookies
		cookies 是一种数据存储技术
		将一段文本数据保存在客户端(浏览器)的一种技术，并可以长时间保存
	2、cookies的使用场合
		1、保存登录信息
		2、保存需要长期使用的数据
	3、django 中使用 cookies
		1、设置 cookies(将数据保存到客户端)
			cookies的设置，在服务器端是由响应对象发起的
			语法：
				响应对象.set_cookie(key,value,expires)
					key:cookie的名字
					value:cookie的值
					expires:保存时间，以s为单位
			1、不使用模板 - HttpResponse
				resp = HttpResponse('给客户端一句话')
				resp.set_cookie('key','value',expires)
				return resp
			2、使用模板 - render()
				resp = render(request,'xx.html')
				resp.set_cookie('key','value',expires)
				return resp
			3、使用重定向 - HttpResponseRedirect()
				resp = HttpResponseRedirect('/地址/')
				resp.set_cookie('key','value',expires)
				return resp

			练习：
				1、完成 fruitday 登录操作
				2、判断手机号 和 密码是否正确
				3、如果正确的话，并且勾选了 记住密码的话，则将登录信息(id,uname)保存进cookie，存起为1年
		2、获取 cookies(从客户端获取数据)	
			注意：
				每次请求时，请求对象(request)会将当前路径下的所有的cookies都带到服务器
			语法：
				request.COOKIES

		练习：
			1、完善 fruitday 登录
			2、当用户访问登录路径时
				1、判断cookies中是否有登录信息
					如果有的话：则显示 欢迎 ：xxxx
					如果没有的话：则正常去往登录页面

1、session - 会话
	1、什么是session
		session，实际上是在服务器上为每个浏览器开辟一段空间，用于保存相关的请求信息
	2、session的使用场合
		session也是为了存放数据而存在的
		通常会把服务器端各个程序要用到的数据保存进去
	3、Django中使用session
		1、设置 session 的值
			request.session['key'] = value
			request.session.set_expiry(time)
				设置session过期时间，如果设置为0的话则表示关闭浏览器，session就失效
		2、获取 session 的值
			request.session['key']
			request.session.get('key')
		3、删除 session 的值
			del request.session['key']
	4、在 settings.py 中有关 session 的设置
		1、SESSION_COOKIE_AGE
			作用：设置 sessionid 在 cookie 中的存活时长
			ex:
				SESSION_COOKIE_AGE=60*30
		2、SESSION_EXPIRE_AT_BROWSER_CLOSE
			作用：设置当浏览器关闭时则清除对应的session
			ex:
				SESSION_EXPIRE_AT_BROWSER_CLOSE=True



	
jquery cookie

{
	'uphone': '13912345678', 
	'id': '1', 
	'csrftoken': 'zWNMR9P3XHN8WsggnclguM6VL81bfZrENLwrb19UOCPGydgnbZqvoQINg4fGduKd'
}
