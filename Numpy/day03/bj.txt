基本绘图函数
默认绘图
定制绘图
图形对象：figure
子图：subplot、GridSpec、axes
刻度定位器：xxxLocator
                     set_major_locator
                     set_minor_locator
散点图：scatter
填充：fill_between
条形图：bar
等高线图：contourf/contour
热力图：imshow
饼图：pie
坐标线：grid
极坐标：gca(projection='polar')
空间曲面：gca(projection='3d')
                  plot_surface/plot_wireframe
对数坐标：semilogy
简单动画：FuncAnimation
一、numpy的通用函数
1.读取文件
xxx xxx xxx xxx
xxx xxx xxx xxx
xxx xxx xxx xxx
loadtxt(
    文件名,
    delimiter=分隔符,
    usecols=选择列,
    unpack=True/False, # 是否展开列
    dtype=目标类型,
    converters=转换器)->列元组/二维数组
代码：k.py
[1 3 2 5 4] >= 3 -> b=[F T F T T]
a = [10 20 30 40 50]   
a[b] -> [20 40 50]
2.算数平均值
样本：S = [s1, s2, ..., sn]
算数平均值：m = (s1 + s2 + ... + sn) / n
numpy.mean(S) -> m
s1 = s + d1
s2 = s + d2
...
sn = s + dn
m = s + (d1 + d2 + ... + dn) / n
                1        -1   2   -2
n -> OO
(d1 + d2 + ... + dn) / n -> 0
算数平均值就是对真值的无偏估计。
代码：mean.py
3.加权平均值
样本：S = [s1, s2, ..., sn]
权重：W = [w1, w2, ..., wn]
加权平均值：a = (s1w1 + s2w2 + snwn) /
                            (w1 + w2 + ... + wn)
numpy.average(S, weights=W)->a
算数平均值就是各个样本权重相等时的加权平均值。
成交量加权平均价格
代码：vwap.py
时间加权平均价格
代码：twap.py
4.最大值和最小值
max/min: 在一个数组中寻找最大值/最小值
argmax/argmin: 在一个数组中寻找最大值/最小值的下标
maximum/minimum：在两个数组的对应位置元素中寻找最大值和最小值
ptp: 一个数组中最大值和最小值之差
代码：max.py，range.py，sprd.py
5.中位数
将多个样本按照大小顺序排列，居于中间位置的元素即为中位数。
13 22 27 31 43
           ^
13 22 27 31 43 51
           \___/
              |
       (27+31)/2
L: 序列长度
M=(A[(L-1)/2]+A[L/2])/2
L=5
M=(A[4/2]+A[5/2])/2
    =(A[2]+A[2])/2
    =A[2]
L=6
M=(A[5/2]+A[6/2])/2
    =(A[2]+A[3])/2
numpy.median(A)->M
代码：med.py
6.标准差
样本：S = [s1, s2, ..., sn]
均值：m = (s1 + s2 + ... + sn) / n
离差：D = [s1-m, s2-m, ..., sn-m]
离差方：Q = [(s1-m)^2, (s2-m)^2, ..., (sn-m)^2]
方差：v = (q1 + q2 + ... + qn) / n, ... / (n-1)
标准差：std = sqrt(v)，方均根误差
numpy.std(S, ddof=非自由因子)->std
代码：std.py
7.时间数据
通过布尔型掩码数组过滤数组中满足特定条件的元素：
数组[掩码数组]，只有与掩码数组中值为True的元素相对应的元素可被访问。
numpy.where(关系/逻辑表达式)->满足关系表达/逻辑表达式的元素的下标数组
numpy.take(数组, 下标数组)->提取数组中由下标数组所指示的元素
代码：week.py
numpy.apply_along_axis(N-1维函数, 轴向, N维数组)
将N维数组按照轴向拆分成若干N-1维数组，作为参数传递给N-1维函数，并将该函数的返回值按照相同的轴向重新组合成数组返回给调用者。
代码：axis.py、sum.py
8.卷积
激励函数：f(t)
单位响应函数：g(t)
则该激励函数作用下的响应函数为以上二者的卷积：
 /
 | f(t)g(t)dt
/
在已知瞬间激励下的响应的条件下，求持续激励下的响应？
a = [1 2 3 4 5]
b = [6 7 8]
numpy.convolve(a, b, 'valid/same/[full]')
                              /   \
            被卷积数组      卷积核数组
            激励强度         单位激励的响应因数

                      40  61  82 - 有效卷积(valid)
                19  40  61  82  67 - 同维度卷积(same)
            6  19  40  61  82  67  40 - 完全卷积(full)
0    0    1    2    3    4    5    0    0
8    7    6 
      8    7    6
            8    7    6
                  8    7    6
                        8    7    6
                              8    7    6
                                    8    7    6
代码：conv.py










