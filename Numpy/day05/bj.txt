基本绘图函数
默认绘图
定制绘图
图形对象：figure
子图：subplot、GridSpec、axes
刻度定位器：xxxLocator
                     set_major_locator
                     set_minor_locator
散点图：scatter
填充：fill_between
条形图：bar
等高线图：contourf/contour
热力图：imshow
饼图：pie
坐标线：grid
极坐标：gca(projection='polar')
空间曲面：gca(projection='3d')
                  plot_surface/plot_wireframe
对数坐标：semilogy
简单动画：FuncAnimation
一、numpy的通用函数
1.读取文件
xxx xxx xxx xxx
xxx xxx xxx xxx
xxx xxx xxx xxx
loadtxt(
    文件名,
    delimiter=分隔符,
    usecols=选择列,
    unpack=True/False, # 是否展开列
    dtype=目标类型,
    converters=转换器)->列元组/二维数组
代码：k.py
[1 3 2 5 4] >= 3 -> b=[F T F T T]
a = [10 20 30 40 50]   
a[b] -> [20 40 50]
2.算数平均值
样本：S = [s1, s2, ..., sn]
算数平均值：m = (s1 + s2 + ... + sn) / n
numpy.mean(S) -> m
s1 = s + d1
s2 = s + d2
...
sn = s + dn
m = s + (d1 + d2 + ... + dn) / n
                1        -1   2   -2
n -> OO
(d1 + d2 + ... + dn) / n -> 0
算数平均值就是对真值的无偏估计。
代码：mean.py
3.加权平均值
样本：S = [s1, s2, ..., sn]
权重：W = [w1, w2, ..., wn]
加权平均值：a = (s1w1 + s2w2 + snwn) /
                            (w1 + w2 + ... + wn)
numpy.average(S, weights=W)->a
算数平均值就是各个样本权重相等时的加权平均值。
成交量加权平均价格
代码：vwap.py
时间加权平均价格
代码：twap.py
4.最大值和最小值
max/min: 在一个数组中寻找最大值/最小值
argmax/argmin: 在一个数组中寻找最大值/最小值的下标
maximum/minimum：在两个数组的对应位置元素中寻找最大值和最小值
ptp: 一个数组中最大值和最小值之差
代码：max.py，range.py，sprd.py
5.中位数
将多个样本按照大小顺序排列，居于中间位置的元素即为中位数。
13 22 27 31 43
           ^
13 22 27 31 43 51
           \___/
              |
       (27+31)/2
L: 序列长度
M=(A[(L-1)/2]+A[L/2])/2
L=5
M=(A[4/2]+A[5/2])/2
    =(A[2]+A[2])/2
    =A[2]
L=6
M=(A[5/2]+A[6/2])/2
    =(A[2]+A[3])/2
numpy.median(A)->M
代码：med.py
6.标准差
样本：S = [s1, s2, ..., sn]
均值：m = (s1 + s2 + ... + sn) / n
离差：D = [s1-m, s2-m, ..., sn-m]
离差方：Q = [(s1-m)^2, (s2-m)^2, ..., (sn-m)^2]
方差：v = (q1 + q2 + ... + qn) / n, ... / (n-1)
标准差：std = sqrt(v)，方均根误差
numpy.std(S, ddof=非自由因子)->std
代码：std.py
7.时间数据
通过布尔型掩码数组过滤数组中满足特定条件的元素：
数组[掩码数组]，只有与掩码数组中值为True的元素相对应的元素可被访问。
numpy.where(关系/逻辑表达式)->满足关系表达/逻辑表达式的元素的下标数组
numpy.take(数组, 下标数组)->提取数组中由下标数组所指示的元素
代码：week.py
numpy.apply_along_axis(N-1维函数, 轴向, N维数组)
将N维数组按照轴向拆分成若干N-1维数组，作为参数传递给N-1维函数，并将该函数的返回值按照相同的轴向重新组合成数组返回给调用者。
代码：axis.py、sum.py
8.卷积
激励函数：f(t)
单位响应函数：g(t)
则该激励函数作用下的响应函数为以上二者的卷积：
 /
 | f(t)g(t)dt
/
在已知瞬间激励下的响应的条件下，求持续激励下的响应？
a = [1 2 3 4 5]
b = [6 7 8]
numpy.convolve(a, b, 'valid/same/[full]')
                              /   \
            被卷积数组      卷积核数组
            激励强度         单位激励的响应因数

                      40  61  82 - 有效卷积(valid)
                19  40  61  82  67 - 同维度卷积(same)
            6  19  40  61  82  67  40 - 完全卷积(full)
0    0    1    2    3    4    5    0    0
8    7    6 
      8    7    6
            8    7    6
                  8    7    6
                        8    7    6
                              8    7    6
                                    8    7    6
代码：conv.py
简单移动平均线和指数移动平均线
代码：ma.py
(a + b + c + d + e) / 5
a * 0.2 + b * 0.2 + c * 0.2 + d * 0.2 + e * 0.2
[0.2 0.2 0.2 0.2 0.2]
[x y z] x + y + z -> s
(ax + by + cz)/(x + y + z)
(ax + by + cz)/s
a x/s + b y/s + c z/s
[x/s, y/s, z/s]
布林带
中轨：移动平均线――趋势――策略
上轨：中轨+标准差x2――压力 \ 买卖点
下轨：中轨-标准差x2――支撑   /
代码：bb.py
9.线性模型
1  5000
2  10000
3  15000
4  20000
1)线性预测
a b c d e f g
N = 3        ?
A B C
/ aA+bB+cC=d
| bA+cB+dC=e =>[A B C] -> g=dA+eB+fC
\ cA+dB+eC=f 
/ a b c \      / A \     / d \
|  b c d |  x |  B  | = |  e |
\  c d e /     \ C /     \  f /
---------     ------     -----
      a              x           b 
                      = numpy.linalg.lstsq(a, b)
bx->g
代码：line.py
2)线性拟合
x1       y1
x2       y2
...
xn       yn
y=kx+b
y1=kx1+b
y2=kx2+b
...
yn=kxn+b
/ x1 1 \    / k \      / y1 \
| x2 1  | x | b |   = | y2  |
| ...      |    \     /      | ...   |
\ xn 1/                   \ yn /
--------    -----       ------
    a             x              b
                   =numpy.linalg.lstsq(a, b)
10.裁剪、压缩和累乘
1)clip
数组对象.clip(min=最小阈值, max=最大阈值)->将超过最大阈值和不足最小阈值的元素分别设置为最大阈值和最小阈值。
2)compress
数组对象.compress(条件)->满足条件的元素所组成的数组
3)prod
数组对象.prod()->元素的累乘之积
数组对象.cumprod()->元素累乘的过程
代码：ndarray.py
11.协方差、相关系数和相关矩阵
样本：
a: [a1, a2, ..., an]
b: [b1, b2, ..., bn]
均值：
ave(a) = (a1+a2+...+an)/n
ave(b) = (b1+b2+...+bn)/n
离差：
dev(a) = [a1, a2, ..., an] - ave(a)
dev(b) = [b1, b2, ..., bn] - ave(b)
方差：
var(a) = ave(dev(a)dev(a))
var(b) = ave(dev(b)dev(b))
标准差：
std(a) = sqrt(var(a))
std(b) = sqrt(var(b))
-------------------------------
协方差：
cov(a,b) = ave(dev(a)dev(b))
cov(b,a) = ave(dev(b)dev(a))
相关系数：
    cov(a,b)
--------------  \
std(a)std(b)    \ [-1, 1]
    cov(b,a)       / 正负号表示相关性的方向正或者反
--------------  /   绝对值表示相关性的程度强或者弱
std(b)std(a)
相关矩阵：
    var(a)             cov(a,b)
--------------   --------------
std(a)std(a)   std(a)std(b)

    cov(b,a)         var(b)
--------------   --------------
std(b)std(a)   std(b)std(b)
numpy.corrcoef(a, b) -> /       1        相关系数 \
                                           \ 相关系数        1       /
代码：corr.py
10 12 15 20
diff
2 3 5
12.多项式拟合
y = p0x^n + p1x^n-1 + p2x^n-2 + ... + pn
numpy.polyfit(X, Y, n)->[p0, p1, ..., pn]
numpy.polyval([p0, p1, ..., pn], X)->Y
numpy.polyder([p0, p1, ..., pn])->[q0, q1, qn-1]
numpy.roots([p0, p1, ..., pn])->
p0x^n + p1x^n-1 + p2x^n-2 + ... + pn = 0
方程的根
代码：poly.py
13.符号数组
1)numpy.sign([12 -8 -9 11 -7 -0 25])->
   [  1 -1 -1   1 -1   0   1]
2)numpy.piecewise([12 -8 -9 11 -7 -0 25],
   [条件1, 条件2, ...], [取值1, 取值2, ...])
      >0      <0                1         -1
净额成交量(OBV)
[10      -5      -1     ] [1 -1 -1]
[1000 2000 3000]
[1000 -2000 -3000]
M8[D]
numpy.datetime64[D] -> int
                                        -> md.datetime.datetime
def 转换器(参数):
    return 返回值
dates, ... = loadtxt(..., dtype=目标类型,
              converters={列号: 转换器})
'28-01-2011'----->转换器------->'2011-01-28'
                       参数              返回值            | M8[D]
                                                                  v
                                                              dates
                                                        datetime64[D]
14.矢量化
def 标量函数(标量参数):
       ...
       return 标量返回值
矢量返回值 = numpy.vectorize(标量函数)(矢量参数)
代码：vec.py、sim.py
15.数据平滑
卷积降噪->曲线拟合->计算特征->指导业务
y = f(x)
y = g(x)
y = f(x) - g(x) = 0
二、矩阵和ufunc
1.创建矩阵
numpy中的矩阵是matrix类类型的对象，matrix类是ndarray类的子类，对某些专门针对矩阵的运算做了重载，增加部分新的属性和方法。
numpy.matrix(可被解释为矩阵的二维容器,
    copy=是否复制数据[True])->矩阵对象
numpy.mat(可被解释为矩阵的二维容器)->矩阵对象，数据共享
可被解释为矩阵的二维容器也可以用字符串表示，如：
'1 2 3; 4 5 6; 7 8 9'
numpy.bmat(子矩阵的块组合字符串)->组合矩阵
'A B; C D'
代码：mat.py
2.ufunc，通用函数，统一函数
numpy.ufunc是一个类，由该类所创建的对象可被当做函数调用，在执行过程中，会根据所接收的矢量化参数中的元素，依次调用其内部封装的标量化函数，并将其返回的标量结果组织成矢量返回调用者。
标量函数(标量)->标量
numpy.frompyfunc(标量函数, 参数个数, 返回值个数)->
    ufunc类型的对象
ufunc类型的对象(矢量)->矢量
代码：ufunc.py
3.加法ufunc预定义对象
numpy.add.reduce(数组)->元素累加和
numpy.add.accumulate(数组)->元素累加的过程
numpy.add.reductat(数组, 位置)->分段累加
numpy.add.outer(数组, 数组)->外和
a: [1 2 3]
b: [4 5 6 7]
numpy.add.outer(a, b)
    4 5 6   7
1  5 6 7   8
2  6 7 8   9
3  7 8 9 10
代码：add.py
4.除法ufunc预定义对象
1)真除：[5 5 -5 -5]<真除>[2 -2 2 -2] = [2.5 -2.5 -2.5 2.5]
numpy.true_divide()
numpy.divide()
/
2)地板除：[5 5 -5 -5]<地板除>[2 -2 2 -2] = [2 -3 -3 2]
numpy.floor_divide()
//
3)天花板除：[5 5 -5 -5]<天花板除>[2 -2 2 -2] = [3 -2 -2 3]
numpy.ceil(a/b).astype(int)
4)截断除：[5 5 -5 -5]<截断除>[2 -2 2 -2] = [2 -2 -2 2]
numpy.trunc(a/b).astype(int)
5.取余ufunc预定义对象
被除数<除以>除数=商...余数
5<除以>2=2...1
除数<乘以>商+余数=被除数
1)地板模：
[5 5 -5 -5]<地板除>[2 -2 2 -2] = [2 -3 -3 2]...[1 -1 1 -1]
numpy.remainder()
numpy.mod()
%
2)截断模：
[5 5 -5 -5]<截断除>[2 -2 2 -2] = [2 -2 -2 2]...[1 1 -1 -1]
numpy.fmod()
代码：div.py
6.python语言中绝大部分的运算符都被numpy通过ufunc进行了重载定义，使之能够支持数组间的运算。
1 1 2 3 5 8 13 21 ... ? ...
                                  n
f(n) = f(n-1) + f(n-2), n >= 3
f(1) = f(2) = 1
代码：fibo.py
      1 1  1 1  1 1
      1 0  1 0  1 0
1 1 2 1 3 2  5 3     fn
1 0 1 1 2 1  3 2 ...
F1  F2  F3    F4      Fn-1
幂运算符：**
7.实现三角函数的ufunc预定义对象
利萨如曲线
代码：lissa.py
方波发生器
4sin(1x)     4sin(3x)     4sin(5x)
--------- + ---------- + ---------- + ...
   1pi              3pi               5pi         2k-1
   1                 2                   3              k
代码：squr.py
8.位运算
1)异或：^/__xor__/bitwise_xor
0 ^ 0 = 0
0 ^ 1 = 1
1 ^ 0 = 1
1 ^ 1 = 0
if a^b < 0 then a和b异号
2)与：&/__and__/bitwise_and
0 & 0 = 0
0 & 1 = 0
1 & 0 = 0
1 & 1 = 1
  1 00000001 - 1 = 00000000
  2 00000010 - 1 = 00000001
  4 00000100 - 1 = 00000011
  8 00001000 - 1 = 00000111
16 00010000 - 1 = 00001111
             \________&________/
                            |
                            v
                            0
if a & (a-1) == 0 then a是2的幂
3)移位
右移位：>>/__rshift__/right_shift: >>1 <==> /2
左移位：<</__lshift__/left_shift: <<1 <==> x2
代码：bit.py
三、Numpy的子模块
1.线性代数子模块(linalg)
1)矩阵的逆矩阵：inv
若矩阵A和矩阵B的乘积是一个单位矩阵，则成A和B互为逆矩阵：A x A^-1 = E, A必须是方阵
代码：inv.py
2)解线性方程组
/ x-2y+z=0
| 2y-8z-8=0
\ -4x+5y+9z+9=0
x-7z-8=0
5x-10y+5z=0
-8x+10y+18z+18=0
-3x+23z+18=0
3x-21z-24=0
2z-6=0
z=3
x-21-8=0
x=29
29-2y+3=0
y=16
/  1x + -2y + 1z = 0
|   0x + 2y + -8z = 8
\ -4x + 5y + 9z = -9
/  1  -2  1 \    / x \    /  0 \
|   0   2 -8 | x | y | = |  8  |
\ -4   5  9 /    \ z /    \ -9 /
------------    -----    ------
         a              x           b
                         = nump.linalg.lstsq(a, b)[0]
                         = nump.linalg.solve(a, b)
代码：solve.py








