

第二天

复习 

非关系型数据库和关系型数据库的比较
1. 不是以关系模型构建数据结构，结构比较自由
   不保证数据的一致性
2. 非关系型数据库弥补了关系型数据库的一些不足，能    够在处理高并发，海量数据上体现优势
3. 非关系型数据库的个性化使其可以在节省空间，提高    效率方面发挥作用

Mongodb   文档型非关系型数据库

创建数据库 ：  use  databaseName
删除数据库 ：  db.dropDatabase()

创建集合   ：  db.createCollection()
               db.collectionName.insert()
删除集合   ：  db.collectionName.drop()
重命名集合 ：db.collectionName.renameCollection()

查看数据库 ： show dbs 
查看集合   ： show  collections
              show  tables

插入文档 ： insert（）  save（）
==================================================

获取集合对象
db.class1
db.getCollection("class1")

e.g. 
db.getCollection("class0").insert({name:'阿喜',age:25})

查找操作

mysql : select ... from  table where  ....

mongo :  db.collection.find(query,field)

查找所有内容
db.collection.find()  ----> select * from table

find(query,field)
功能 ： 查找数据
参数 ：  query ： 筛选条件，相当于where子句
				 field ： 选定要展示的域
返回值： 返回查找到的文档

query ： 以键值对的形式给出筛选条件

e.g. db.class0.find({name:'阿宝'})

field ： 以键值对的形式给出要展示（不展示）的域
         域名为键，值为1则表示展示，0表示不展示

* 如果某个域设为0则表示不展示该域，其他域均显示
  如果某个域设为1则表示展示该域，其他域均不显示
* 在field显示设置的时候普通域0和1不能同时出现
* _id 默认永远显示，除非设置为0
* 如果不写field参数则表示所有内容都显示

e.g.   db.class1.find({name:'Abby'},{_id:0,name:1,age:1})

findOne(query,field)
功能 : 查找符合条件的第一条文档
参数 ： 同find
返回值：返回查找到的文档

e.g.  db.class1.findOne({age:18},{_id:0})

query更多的筛选功能

操作符：使用$符号注明的一个特殊字串，表达一定的含         义。 比如 $lt 表示小于

比较操作符 

$eq  等于

e.g.  db.class1.find({age:{$eq:18}},{_id:0})
      年龄等于18的文档
=====》db.class1.find({age:18},{_id:0})

$lt  小于 < 

e.g.  db.class1.find({age:{$lt:18}},{_id:0})
      年龄小于18的文档

* 字符串也可以比较大小

$lte  小于等于  <= 

e.g.  db.class0.find({age:{$lte:27}},{_id:0})
      年龄小于等于27

$gt  大于  >

e.g.  db.class0.find({age:{$gt:26}},{_id:0})
      年龄大于26 

$gte  大于等于  >=

e.g.   db.class0.find({age:{$gte:27}},{_id:0})
       年龄大于等于27 

$ne   不等于   != 

e.g.   db.class0.find({age:{$ne:27}},{_id:0})
       年龄不等于27
* 如果一个文档不存在某个域，则也认为不等于

$in  包含

e.g. db.class0.find({age:{$in:[25,27,30]}},{_id:0})
年龄包含在25 27 30中的

$nin  不包含

e.g. 
db.class0.find({age:{$nin:[24,25,26]}},{_id:0})
年龄不包含24，25，26 


逻辑操作符

and 
1. query中多个条件为并列的关系
e.g. db.class1.find({name:'Tom',age:18},{_id:0})

2. $and 逻辑与

年龄等于17 并且姓名小于Tom
db.class1.find({$and:[{name:{$lt:'Tom'}},{age:17}]},{_id:0})

$or 逻辑或

e.g.  年龄为27或者姓名为阿喜
db.class0.find({$or:[{name:'阿喜'},{age:27}]},{_id:0})

e.g. 
db.class0.find({$or:[{age:{$gt:28}},{age:{$lt:26}}]},{_id:0})


$not  逻辑非

e.g.  年龄不等于18 db.class1.find({age:{$not:{$eq:18}}},{_id:0})

$nor  既不也不

e.g. 既不是17岁也不是 m的
 db.class1.find({$nor:[{age:17},{sex:'m'}]},{_id:0})

条件混合

（年龄大于27 并且叫阿花） 或者  叫阿喜

 db.class0.find({$or:[{name:'阿花',age:{$gt:27}},{name:'阿喜'}]},{_id:0})

数组值
[1,2,3,4]

* 数值类型可以混合
* 是有序的

数组查找

查看数组中是否包含某一项

e.g.
db.class2.find({score:{$lt:60}},{_id:0})
* 只要数组中有任意一项符合查找条件即可被查找

$all 
查找数组中同时包含多项的文档

e.g.   db.class2.find({score:{$all:[65,88]}},{_id:0})
查找数组中同时包含 65  88的文档

$size 
通过数组中元素个数查找

e.g. db.class2.find({score:{$size:4}},{_id:0})
     查找score数组中包含4项的文档

$slice
取数组的部分进行显示 放在field中

e.g.  db.class2.find({},{_id:0,score:{$slice:2}})
      显示数组中的前几项

e.g.  db.class2.find({},{_id:0,score:{$slice:[1,2]}})
跳过数组中第一项显示后两项

其他查询方法

$exists
判断一个域是否存在
e.g.
db.class1.find({sex:{$exists:true}},{_id:0})
查找有sex域的文档 （如果是false则表示查找无这个域的文档）

$mod 
余数查找

e.g. db.class0.find({age:{$mod:[2,1]}},{_id:0})
     查找age除以2余数为1 的文档

$type
查找指定数据类型的文档

* 如果查找数组的域则表示数组中值的类型

类型列表：
https://docs.mongodb.com/manual/reference/operator/query/type/index.html

查找结果相关的函数

distinct()
功能：查看集合某个域的取值范围

e.g.
db.class.distinct('hobby')

pretty()
功能：格式化显示查找结果

limit（n）
功能：显示查找结果的前几条

e.g.   db.class0.find({},{_id:0}).limit(2)
       显示查找结果的前两条

skip（n）
功能：显示查找结果跳过前n条

e.g.   db.class0.find({},{_id:0}).skip(2)
       查找结果跳过前2条显示

count()
功能：查找结果计数

e.g.  统计年龄大于26的文档个数
 db.class0.find({age:{$gt:26}},{_id:0}).count()

sort(｛域:1/-1｝)
功能： 对查找结果排序显示
参数： 以键值对形式给出
       1 表示按照升序排列  -1表示降序排列
e.g.
 db.class2.find({},{_id:0}).sort({age:1})
 按照年龄升序排列

复合排序  ： 当第一排序项相同时比较第二项

e.g.  db.class2.find({},{_id:0}).sort({age:1,name:1})

函数连续使用 

当函数返回的是文档集合时可以连续调用操作函数

e.g.  db.class2.find({},{_id:0}).sort({age:1}).limit(3)


文档删除操作

delete from  table  where  ....

db.collection.remove(query,justOne)
功能 ： 删除文档
参数 ： query  : 筛选要删除的文档 相当于where
                 用法同查找操作
				justOne：布尔值，默认为false 表示删除所有          符合条件的文档 
				         如果赋值为true则只删除第一条符合条件文档

e.g.  db.class1.remove({sex:{$exists:true}})
      删除所有有sex域的文档

e.g.  db.class1.remove({age:17},true)
      删除第一条年龄为17的文档

删除集合中所有文档
db.collection.remove({})

e.g.  db.class0.remove({})  

练习：

1. 创建数据库 名字 grade
2. 数据库中创建集合名字 class
3. 集合中插入若干文档，文档格式如下
  ｛name:'zhang',age:10,sex:'m',hobby:['a','b']｝
	hobby 可以是 ： draw sing  dance  basketball  football  pingpong  computer
4. 查找练习
查看班级所有人信息
查看班级中年龄为8岁的学生信息
查看年龄大于10岁的学生信息
查看年龄在8-11岁之间的学生信息
找到年龄为9岁且为男生的学生
找到年龄小于7岁或者大于11岁的学生
找到年龄是8岁或者11岁的学生
找到有两项兴趣爱好的学生
找到兴趣爱好中有draw的学生
找到喜欢画画和跳舞的学生
统计兴趣有三项的学生人数
找出本班年龄第二大的学生
查看学生的兴趣范围
找到班级中年龄最大的三个学生

5. 删除所有年龄大于12或者小于6岁的学生











