
*************************************
第四天
复习：
1. 数据修改 
update(query,update,upsert,multi)

修改器：$set  $unset  $rename  $setOnInsert
        $inc   $mul   $min  $max 
				$push  $pushAll  $pull  $pullAll 
				$each  $position  $sort  $addToSet
				$pop

时间类型 ： Date()  ISODate()  valueOf()

null ： 1.表示一个域的值
        2.查找时表示一个域不存在
文档类型： 通过 . 获取内部文档值

索引操作 ： ensureIndex()
            dropIndex()   dropIndexes()
						getIndexes()
=========================================
聚合操作

对文档的筛选结果进行整理统计 （更高级的查找）

db.collection.aggregate()
功能： 聚合函数 ，完成聚合操作
参数： 聚合条件  ---》 聚合操作符

聚合操作符

$group  分组聚合  需要配合具体的分组操作符                   使用
    
		$sum : 求和
		e.g. 
		db.class1.aggregate({$group:
		                     表示进行分组操作  
		          {_id:'$age',
           固定写法取age值进行分组
	            num:{$sum:1}}})
						num为统计结果的域名 $sum表示对统计进行什么操作

     e.g. 求每个性别的年龄之和
			db.class1.aggregate({$group:{_id:'$gender',num:{$sum:'$age'}}})
			
		 $avg 求平均数

		 e.g.  求每个性别年龄平均值db.class1.aggregate({$group:{_id:'$gender',avg_age:{$avg:'$age'}}})
     
		 $max 求最大值
			
			e.g. 求每组的最大值db.class1.aggregate({$group:{_id:'$gender',max:{$max:'$age'}}})
     
		 $min 求最小值

		  e.g. 求每组的最小值db.class1.aggregate({$group:{_id:'$gender',min:{$min:'$age'}}})

$project
用于修改文档的显示效果

e.g.  $project 值的用法同 find第二个参数  db.class1.aggregate({$project:{_id:0,name:1,age:1}})

e.g.  可以更换域的名称显示
db.class1.aggregate({$project:{_id:0,Name:'$name',Age:'$age'}})


$match   过滤数据

e.g.  $match值的写法同find中的query写法
db.class1.aggregate({$match:{age:{$gt:18}}})

$limit  显示前几条文档

e.g.   db.class1.aggregate({$limit:3})

$skip   跳过几条文档

e.g.  db.class1.aggregate({$skip:2})

$sort  排序

e.g.   db.class1.aggregate({$sort:{age:-1}})

聚合管道 ：将前一个聚合操作得到的结果，给             后一个聚合操作继续使用
db.collection.aggregate([聚合1，聚合2...])

e.g.  match ---> project ---> sort  
db.class1.aggregate([{$match:{gender:'m'}},{$project:{_id:0}},{$sort:{age:-1}}])

e.g.  group ---> match 
db.class1.aggregate([{$group:{_id:'$name',num:{$sum:1}}},{$match:{num:{$gt:1}}}])

固定集合

mongodb中可以创建大小固定的集合，称之为固定集合。

特点 ： 插入速度快，顺序查找速度快
        能够淘汰早期的数据
				可以控制集合的空间大小

使用 ： 临时缓存
        日志处理

创建：

db.createCollection(collection,{capped:true,size:10000,max:10000})

capped:true    表示创建的集合是固定集合
size：表示集合的大小 单位 kb 
max: 表示最多存放的文档个数

e.g. 
db.createCollection('log',{capped:true,size:10,max:3})


文件存储

文件存储数据库的方式

1. 存储路径
 将文件在本地的路径以字符串形式存储到数据库
 
 优点：节省数据库空间
 缺点：当数据库或者文件位置发生变化时需要修       改数据库内容 

2. 存储文件本身
 将文件以二进制（数据库指定编码）的形式存入到数据库中

 优点 ： 数据库在，文件就在，不会丢失
 缺点 ： 占用数据库的空间大。特别是文件较大         的时候，由于数据库都是结构化的存储         数据，所以对大文件处理效率较低

mongo存储大文件方案 ： GridFS 存储大文件

* 超过16M的文件为大文件

GridFS方案解释
  在mongodb一个数据库中创建两个集合共同完成文件的存储

  fs.files ： 存储文件的相关信息（文件名，              文件类型）
	fs.chunks: 分块存储文件的实际内容

如何存储

mongofiles  -d  dbname  put  file
                数据库       要存储的文件

* 数据库不存在则自动创建

fs.files
{ "_id" : ObjectId("5b2dc13269d72e13a6a28eaa"), "chunkSize" : 261120, "uploadDate" : ISODate("2018-06-23T03:40:34.827Z"), "length" : 119862, "md5" : "ab01c0bfa9d2751b2ae33aea70e8f879", "filename" : "file.jpg" }

fs.chunks 

{ "_id" : ObjectId("5b2dc13269d72e13a6a28eab"), "files_id" : ObjectId("5b2dc13269d72e13a6a28eaa"), "n" : 0, "data" : BinData(0,"/9j/4AAQSkZJRgAB...)}

* 对于同一个文件 fs.files 的_id值 等于 fs.chunks 中files_id域的值

提取文件

mongofiles -d  dbname  get  file 
     
Grid的优缺点
优点 ： 存储方便，提供较好的存命令，方便移         植
缺点 ： 读写效率低

游标

通过获取操作数据库的返回结果，得到返回结果的对象。通过该游标对象可以进一步得到数据库内容。

var cursor = db.class1.find()
cursor.next()
cursor.hasNext()

通过python 操作MongoDB

pymongo 模块   第三方模块

安装
sudo pip3 install pymongo

操作步骤
1. 创建mongodb数据库连接对象
conn = pymongo.MongoClient('localhost',27017)

2. 生成要操作的数据库对象 (__getitem__)
db = conn.stu
db = conn['stu']

3. 获取集合对象
myset = db.class0
myset = db['class0']

4. 通过集合对象操作mongodb数据库
   
	 增删改查索引聚合文件操作

5. 关闭数据库连接
   conn.close()

插入数据    
insert()   参数用法同mongoshell中insert
insert_many()                       insert_one()   
save()

查找操作
find()
功能 ： 查找数据库内容
参数 ： 同mongo shell find（） 
返回值 ： 返回一个结果游标cursor

* 在pymongo中使用操作符的方法和在mongoshell中一样，只需要加引号以字符串的方式给出

cursor属性函数

next()
limit()
skip()
count()
sort()
pymongo  ：sort([('age',-1),('name',1)])
mongo shell ： sort({age:-1,name:1})

* 当游标使用了next或for取值后就不能再进行limit
skip或者sort操作了

find_one() 
返回一个字典

修改操作
update（query,update,upsert=False,multi=False）
update_many（）
update_one()

删除操作
remove(query,multi = True)
multi默认为True表示删除所有符合条件的数据
设置为False表示只删除一条

索引
ensure_index()
list_indexes()
drop_index()
drop_indexes()

聚合
aggregate([])
参数： 和mongoshell中写法一致
返回值 ： 返回一个迭代器同find 

作业 ： 

总结mongo和MySQL的使用区别
复习tftp和聊天室项目 
对mongo使用pymongo改写之前的grade练习